// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  phone     String
  role      Role     @default(USER)
  guest    Guest?
  admin    Admin?
  bookings  Booking[]
  reviews Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
model Guest {
  id        String   @id @default(cuid())
  address   String
  avatar    String
  dob       DateTime
  userId   String    @unique
    user      User   @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Admin {
  id        String   @id @default(cuid())
  userId   String    @unique
    user      User   @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoomClass {
  id        String   @id @default(cuid())
  name      String
  description String
  pricePerNight    Float
  rooms Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model RoomType {
  id        String   @id @default(cuid())
  name      String
  description String
    rooms Room[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model  Room {
  id        String   @id @default(cuid())
  roomNumber String
  roomTypeId String
  RoomType RoomType @relation(fields: [roomTypeId], references: [id])
  roomClassId String
  RoomClass RoomClass @relation(fields: [roomClassId], references: [id])
  status    Boolean
  roomBookings RoomBooking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roomImages RoomImage[]
  reviews Review[]
}

model RoomImage {
  id        String   @id @default(cuid())
  url       String
  roomId    String
  room      Room @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Booking {
  id        String   @id @default(cuid())
  checkIn   DateTime
  checkOut  DateTime
  total     Float
  status    Boolean
  userId  String
  user      User @relation(fields: [userId], references: [id])
  roomBookings RoomBooking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model RoomBooking {
  id        String   @id @default(cuid())
  bookingId String
  roomId    String
  booking   Booking @relation(fields: [bookingId], references: [id])
  room      Room @relation(fields: [roomId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  roomId    String
  userId  String
  user      User @relation(fields: [userId], references: [id])
  room      Room @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}